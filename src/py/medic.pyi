from __future__ import annotations

import re
import logging
from types import ModuleType
from typing import Optional
from typing import Union
from typing import Generator
from typing import Iterable

from maya.OpenMaya import MObject
from maya.OpenMaya import MDagPath
from maya.OpenMaya import MSelectionList
from maya.OpenMaya import MFnDependencyNode
from maya.OpenMaya import MFnDagNode


class Statics:
    TesterPathEnvName: str
    KartePathEnvName: str
    RePluginExt: re.Pattern
    RePyPluginExt: re.Pattern
    ReKarteExt: re.Pattern
    RePyExt: re.Pattern
    SelectionList: MSelectionList

    Wait: int
    Done: int
    Failed: int
    Suspended: int

    Logger: logging.Logger

    @staticmethod
    def ImportModule(path: str) -> ModuleType: ...

    @staticmethod
    def Debug(msg: str) -> None: ...

    @staticmethod
    def Warning(msg: str) -> None: ...

    @staticmethod
    def Error(msg: str) -> None: ...


def SetLogLevel(log_level: int) -> None: ...


class Types:
    Null: Types
    Bool: Types
    Int: Types
    Float: Types
    String: Types
    BoolArray: Types
    IntArray: Types
    FloatArray: Types
    StringArray: Types


class TesterScopes:
    NodeTester: TesterScopes
    AssetTester: TesterScopes
    SceneTester: TesterScopes


class Parameter:

    @staticmethod
    def Create(name: str,
               label: str,
               typ: Types,
               defaultValue: any
               ) -> Optional[Parameter]:
        ...


class ParamInfo:
    name: str
    label: str
    type: Types
    default_value: any


class ParamContainer:

    @staticmethod
    def Create() -> ParamContainer: ...

    def append(self, param: Parameter) -> Optional[int]: ...

    def set(self, paramName: str, value: any, index: int = 0) -> bool: ...

    def names(self) -> list[str]: ...

    def get(self, paramName: str, index: int = 0) -> Optional[any]: ...

    def getParamInfos(self) -> list[ParamInfo]: ...

    def getDefault(self) -> Optional[any]: ...


class Node:

    def initialize(self) -> bool: ...

    @staticmethod
    def Create(name: str) -> Node: ...

    def name(self) -> str: ...

    def type(self) -> str: ...

    def dag(self) -> Optional[MFnDagNode]: ...

    def dg(self) -> MFnDependencyNode: ...

    def object(self) -> MObject: ...

    def isAlive(self) -> bool: ...

    def isDag(self) -> bool: ...

    def getPath(self) -> MDagPath: ...

    def parents(self) -> list[Node]: ...

    def children(self) -> list[Node]: ...


class Context:

    @staticmethod
    def Create(name: str) -> Context: ...

    def name(self) -> str: ...

    def params(self) -> Optional[ParamContainer]: ...


class Report:

    def isAlive(self) -> bool: ...

    def addSelection(self) -> None: ...

    def node(self) -> Optional[Node]: ...

    def context(self) -> Optional[Context]: ...


class Tester:

    def Scope(self) -> TesterScopes: ...

    def Name(self) -> str: ...

    def Match(self, target: Union[Node, Context, any]) -> bool: ...

    def Description(self) -> str: ...

    def IsFixable(self) -> bool: ...

    def GetParameters(self) -> Optional[ParamContainer]: ...

    def fix(self, report: Report, params: ParamContainer) -> bool: ...

    def initialize(self) -> None: ...

    def test(self, node: Node) -> Optional[Report]: ...


class Karte:
    py_testers: list[Tester]

    def Name(self) -> str: ...

    def Description(self) -> str: ...

    def Visible(self) -> bool: ...

    def hasTester(self, tester: Tester) -> bool: ...

    def hasPyTester(self, tester: Tester) -> bool: ...

    def pyTesters(self) -> Generator[Tester, None, None]: ...

    def cppTesters(self) -> Generator[Tester, None, None]: ...

    def testers(self) -> list[Tester]: ...

    def addPyTester(self, tester: Tester) -> bool: ...


Options: type = dict[str, dict[str, any]]


class Visitor:
    scene_collected: int
    assets_collected: int

    def selectionOnly(self) -> bool: ...

    def setSelectionOnly(self, v: int) -> None: ...

    def clearScene(self) -> None: ...

    def clearAssets(self) -> None: ...

    def setScene(self, scene: Context) -> bool: ...

    def scene(self) -> Optional[Context]: ...

    def addAsset(self, asset: Context) -> bool: ...

    def assets(self) -> list[Context]: ...

    def getOptions(self) -> Options: ...

    def setOptions(self, optionDict: Options) -> bool: ...

    def initializeTester(self, tester: Tester) -> None: ...

    def finalizeTester(self, tester: Tester) -> None: ...

    def addReport(self, tester: Tester, report: Report) -> None: ...

    def canVisit(self,
                 karte: Optional[Karte] = None,
                 tester: Optional[Tester] = None,
                 node: Optional[Node] = None,
                 context: Optional[Context] = None
                 ) -> bool:
        ...

    def visitKarte(self, karte: Karte) -> None: ...

    def visitTester(self, tester: Tester) -> None: ...

    def visitNode(self, tester: Tester, node: Node) -> None: ...

    def visitContext(self, tester: Tester, context: Context) -> None: ...

    def test(self, karte: Karte, tester: Tester) -> None: ...

    def testAll(self, karte: Karte) -> None: ...

    def hasError(self, tester: Tester) -> bool: ...

    def reportAll(self) -> dict[Tester, list[Report]]: ...

    def report(self, tester: Tester) -> list[Report]: ...

    def reset(self) -> None: ...


class PyKarteManager:

    def karteNames(self) -> Iterable[str]: ...

    def karte(self, name: str) -> Optional[Karte]: ...

    def regist(self, karte: Karte) -> bool: ...

    def unload(self) -> None: ...


class PyTesterManager:

    def regist(self, tester: Tester) -> bool: ...

    def testerNames(self) -> Iterable[str]: ...

    def tester(self, name: str) -> Optional[Tester]: ...

    def unload(self) -> None: ...


class PluginManager:

    def __init__(self) -> None: ...

    def tester(self, name: str) -> Optional[Tester]: ...

    def karte(self, name: str) -> Optional[Karte]: ...

    def testerNames(self) -> list[str]: ...

    def karteNames(self) -> list[str]: ...

    def reloadPlugins(self) -> None: ...


class PyReport:

    def __init__(self,
                 node_or_context: Union[Node, Context],
                 components: Optional[MObject] = None
                 ) -> None:
        ...

    def isAlive(self) -> bool: ...

    def addSelection(self) -> None: ...

    def node(self) -> Optional[Node]: ...

    def context(self) -> Optional[Context]: ...


class PyTester:

    def __init__(self) -> None: ...

    def setOptions(self, options: Options) -> None: ...

    def getOptions(self) -> Options: ...

    def initialize(self) -> None: ...

    def finalize(self) -> None: ...

    def Scope(self) -> TesterScopes: ...

    def Name(self) -> str: ...

    def Description(self) -> str: ...

    def Dependencies(self) -> list[str]: ...

    def Match(self, node_or_context: Union[Node, Context]) -> bool: ...

    def IsFixable(self) -> bool: ...

    def GetParameters(self) -> ParamContainer: ...

    def test(self, node_or_context: Union[Node, Context]) -> Optional[PyReport]: ...

    def fix(self, report: PyReport, params: ParamContainer) -> bool: ...
